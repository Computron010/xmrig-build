name: NoDevFee XMRIG (all)
on:
  # Manueel starte
  workflow_dispatch:

jobs:
  build_win:
    name: Build Windows artifacts
    runs-on: windows-latest
    steps:
      - name: Checkout Repository master branch
        uses: actions/checkout@v2
        with:
          repository: xmrig/xmrig
          ref: master  
      - name: Checkout deps
        run:  git clone https://github.com/xmrig/xmrig-deps.git
      - name: Get version
        id: identify
        run: |
          $ghetto=(Get-Content src\version.h | Select-String -Pattern 'APP_VERSION' -Encoding ASCII | ForEach-Object {($_ -split '\s+')[2]}).Trim('\"');
          $env:XMRIG_VERSION=$ghetto;
          $env:XMRIG_VERSION
          echo "::set-output name=version::${{ env.XMRIG_VERSION }}";
      - name: Build project on Windows
        run: |
          PowerShell "(Get-Content src/donate.h) -replace 'DonateLevel = 1','DonateLevel = 0' | Set-Content src/donate.h"
          cmake . -G "MinGW Makefiles" -DXMRIG_DEPS=xmrig-deps\gcc\x64
          make -j2
          copy src\config.json .
          copy bin\WinRing0\WinRing0x64.sys .
          7z a -tzip -mx windows_build.zip xmrig.exe config.json WinRing0x64.sys
      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: windows_build
          path: windows_build.zip
    outputs:
      version: ${{ steps.identify.outputs.version }}
    
  build_lin:
    name: Build Linux artifacts
    runs-on: ubuntu-latest
    container: alpine:latest
    steps:
      - name: Checkout Repository master branch
        uses: actions/checkout@v2
        with:
          repository: xmrig/xmrig

      - name: Build
        run: |
          apk add git make cmake libstdc++ gcc g++ automake libtool autoconf linux-headers
          echo "XMRIG_VERSION="`cat src/version.h | grep -Eo "APP_VERSION\s+\"(.+?)\"" | awk -F "\"" '{print $2}'` >> $GITHUB_ENV
          sed -i 's/DonateLevel = 1/DonateLevel = 0/g' src/donate.h
          mkdir build
          cd scripts && ./build_deps.sh && cd ../build
          cmake .. -DXMRIG_DEPS=scripts/deps -DBUILD_STATIC=ON
          make -j$(nproc)
      - name: Store generated file
        uses: actions/upload-artifact@v2
        with:
          name: linux_xmrig-${{ env.XMRIG_VERSION }}
          path: linux_build.tar.gz
    
  build_macos:
    name: Build MacOS artifacts
    runs-on: macos-latest
    steps:
      - name: Prepare MacOS tools
        run: |
          brew install cmake libuv openssl hwloc
      - name: Checkout Repository master branch
        uses: actions/checkout@v2
        with:
          repository: xmrig/xmrig
          ref: master

      - name: Build hwloc on MacOS
        run: |
          curl -O https://download.open-mpi.org/release/hwloc/v2.1/hwloc-2.1.0.tar.bz2
          tar xjf hwloc-2.1.0.tar.bz2
          cd hwloc-2.1.0
          ./configure --disable-shared --enable-static --disable-io --disable-libxml2
          make -j$(sysctl -n hw.logicalcpu)
          cd ..
      - name: Build project on MacOS
        run: |
          sed -i '' 's/DonateLevel = 1/DonateLevel = 0/g' src/donate.h
          echo "XMRIG_VERSION="`cat src/version.h | grep -Eo "APP_VERSION\s+\"(.+?)\"" | awk -F "\"" '{print $2}'` >> $GITHUB_ENV
          cmake . -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DHWLOC_INCLUDE_DIR=hwloc-2.1.0/include -DHWLOC_LIBRARY=hwloc-2.1.0/hwloc/.libs/libhwloc.a
          make -j$(sysctl -n hw.logicalcpu)
          cp src/config.json .
          tar cfz macos_build.tar.gz xmrig config.json
      - name: Upload MacOS build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: macos_build
          path: macos_build.tar.gz

  release:
    needs: [build_win, build_lin, build_macos]
    name: Create release and upload artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build_win.outputs.version }}
          release_name: Release ${{ needs.build_win.outputs.version }}
          draft: false
          prerelease: false
      - name: Set version
        id: version
        run: echo ::set-output name=VERSION::${GITHUB_REF:10}
      - name: Download Windows build artifact
        uses: actions/download-artifact@v1
        with:
          name: windows_build
      - name: Download Linux build artifact
        uses: actions/download-artifact@v1
        with:
          name: linux_build
      - name: Download MacOS build artifact
        uses: actions/download-artifact@v1
        with:
          name: macos_build
      - name: Upload Windows build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows_build/windows_build.zip
          asset_name: xmrig-${{steps.version.outputs.VERSION}}-win64.zip
          asset_content_type: application/zip
      - name: Upload Ubuntu build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu_build/ubuntu_build.tar.gz
          asset_name: xmrig-${{steps.version.outputs.VERSION}}-lin64.tar.gz
          asset_content_type: application/zip
      - name: Upload MacOS build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos_build/macos_build.tar.gz
          asset_name: xmrig-${{steps.version.outputs.VERSION}}-mac64.tar.gz
          asset_content_type: application/zip